from typing import List

class Solution:
    def pacificAtlantic(self, matrix: List[List[int]]) -> List[List[int]]:
        if not matrix:
            return []

        height = len(matrix)
        width = len(matrix[0])

        pvisit = set()
        avisit = set()

        for i in range(height):
            self.reachable(matrix, pvisit, i, 0) # visit higher land from the pacific on the left side
            self.reachable(matrix, avisit, i, width - 1) # visit higher land from the atlantic on the right side

        for j in range(width):
            self.reachable(matrix, pvisit, 0, j) # visit higher land from the pacific on the top side
            self.reachable(matrix, avisit, height - 1, j) # visit higher land from the pacific on the bottom side

        return list(pvisit.intersection(avisit))

    def reachable(self, matrix, visited, y: int, x: int) -> bool:
        height = len(matrix)
        width = len(matrix[0])
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

        if (y, x) in visited:
            # print("short circuit on", y, x)
            return

        q = [(y, x)]
        while q:
            i, j = q.pop(0)
            if (i, j) in visited:
                continue
            # print(f"started on {y}, {x}: visited {len(visited):2} nodes, visiting {i}, {j}")
            visited.add((i, j))
            value = matrix[i][j]

            ## better way of handling directions
            for ii, jj in directions:
                nexti = i + ii
                nextj = j + jj
                if 0 <= nexti < height and 0 <= nextj < width and matrix[nexti][nextj] >= value:
                    q.append((nexti, nextj))

            ## hardcoding
            ## left of cell
            # if j - 1 >= 0 and matrix[i][j - 1] >= value:
            #     q.append([i, j - 1])

            ## left of cell
            # if j + 1 < width and matrix[i][j + 1] >= value:
            #     q.append([i, j + 1])

            ## top of cell
            # if i - 1 >= 0 and matrix[i - 1][j] >= value:
            #     q.append([i - 1, j])

            ## bottom of cell
            # if i + 1 < height and matrix[i + 1][j] >= value:
            #     q.append([i + 1, j])

s = Solution()
s.pacificAtlantic([[1,2,2,3,5],
                   [3,2,3,4,4],
                   [2,4,5,3,1],
                   [6,7,1,4,5],
                   [5,1,1,2,4]])

m1 = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],
      [68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,19],
      [67,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,85,20],
      [66,127,180,181,182,183,184,185,186,187,188,189,190,191,192,143,86,21],
      [65,126,179,224,225,226,227,228,229,230,231,232,233,234,193,144,87,22],
      [64,125,178,223,260,261,262,263,264,265,266,267,268,235,194,145,88,23],
      [63,124,177,222,259,288,289,290,291,292,293,294,269,236,195,146,89,24],
      [62,123,176,221,258,287,308,309,310,311,312,295,270,237,196,147,90,25],
      [61,122,175,220,257,286,307,320,321,322,313,296,271,238,197,148,91,26],
      [60,121,174,219,256,285,306,319,324,323,314,297,272,239,198,149,92,27],
      [59,120,173,218,255,284,305,318,317,316,315,298,273,240,199,150,93,28],
      [58,119,172,217,254,283,304,303,302,301,300,299,274,241,200,151,94,29],
      [57,118,171,216,253,282,281,280,279,278,277,276,275,242,201,152,95,30],
      [56,117,170,215,252,251,250,249,248,247,246,245,244,243,202,153,96,31],
      [55,116,169,214,213,212,211,210,209,208,207,206,205,204,203,154,97,32],
      [54,115,168,167,166,165,164,163,162,161,160,159,158,157,156,155,98,33],
      [53,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,34],
      [52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35]]

m2 = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],
      [72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,20],
      [71,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,90,21],
      [70,135,192,193,194,195,196,197,198,199,200,201,202,203,204,205,152,91,22],
      [69,134,191,240,241,242,243,244,245,246,247,248,249,250,251,206,153,92,23],
      [68,133,190,239,280,281,282,283,284,285,286,287,288,289,252,207,154,93,24],
      [67,132,189,238,279,312,313,314,315,316,317,318,319,290,253,208,155,94,25],
      [66,131,188,237,278,311,336,337,338,339,340,341,320,291,254,209,156,95,26],
      [65,130,187,236,277,310,335,352,353,354,355,342,321,292,255,210,157,96,27],
      [64,129,186,235,276,309,334,351,360,361,356,343,322,293,256,211,158,97,28],
      [63,128,185,234,275,308,333,350,359,358,357,344,323,294,257,212,159,98,29],
      [62,127,184,233,274,307,332,349,348,347,346,345,324,295,258,213,160,99,30],
      [61,126,183,232,273,306,331,330,329,328,327,326,325,296,259,214,161,100,31],
      [60,125,182,231,272,305,304,303,302,301,300,299,298,297,260,215,162,101,32],
      [59,124,181,230,271,270,269,268,267,266,265,264,263,262,261,216,163,102,33],
      [58,123,180,229,228,227,226,225,224,223,222,221,220,219,218,217,164,103,34],
      [57,122,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,104,35],
      [56,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,36],
      [55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37]]

s.pacificAtlantic(m1)
s.pacificAtlantic(m2)